name: Salesforce Metadata Deploy
description: Builds and deploys metadata to a specified environment
author: nbrown
branding:
  icon: code
  color: blue
inputs:
  DRY_RUN:
    description: "Validate deploy and run Apex tests but don't save to the org."
    type: boolean
  TEST_LEVEL:
    description: "Deployment Apex testing level."
    type: choice
    default: RunLocalTests
    options:
      - NoTestRun
      - RunSpecifiedTests
      - RunLocalTests
      - RunAllTestsInOrg
  WAIT:
    description: "Number of minutes to wait for command to complete and display results."
    type: number
    default: 30
  SOURCE_DIRECTORY:
    description: "Path to the local source files to deploy."
    type: string
    default: force-app
  SFDX_AUTH_URL:
    description: "The auth url tied to your deployment environment"
    type: string
    required: true
  TESTS_TO_RUN:
    description: "Comma-separated list of Apex test class names to run when TEST_LEVEL is RunSpecifiedTests."
    type: string
    required: false

runs:
  using: "composite"
  steps:
    - name: Install Salesforce CLI
      shell: bash
      run: |
        npm install -g @salesforce/cli
        sf --version
    - name: Login to Environment
      shell: bash
      run: |
        sf org login sfdx-url --set-default --sfdx-url-file <(echo "${{ inputs.SFDX_AUTH_URL }}")
    - name: Generate package.xml from changed files
      shell: bash
      run: |
        # Get list of changed files in force-app directory
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare with base branch
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "^${{ inputs.SOURCE_DIRECTORY }}/" || true)
        else
          # For pushes, get files changed in last commit
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "^${{ inputs.SOURCE_DIRECTORY }}/" || true)
        fi
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "No files changed in ${{ inputs.SOURCE_DIRECTORY }}, skipping deployment"
          exit 0
        fi
        
        # Create a temporary directory for changed files
        mkdir -p temp-changed-files
        
        # Copy only changed files to temp directory
        echo "$CHANGED_FILES" | while read -r file; do
          if [ -f "$file" ]; then
            # Create directory structure in temp
            dir=$(dirname "temp-changed-files/$file")
            mkdir -p "$dir"
            cp "$file" "temp-changed-files/$file"
          fi
        done
        
        # Generate package.xml from changed files only
        sf project generate manifest --source-dir temp-changed-files --output-dir manifest       
    - name: Deploy to Environment
      shell: bash
      run: |
        deployFlags=(
            --manifest manifest/package.xml
            --wait ${{ inputs.WAIT }}
            --test-level ${{ inputs.TEST_LEVEL }}
            --verbose
            --ignore-conflicts
          )
        if [ "${{ inputs.DRY_RUN }}" = "true" ]; then
          deployFlags+=( --dry-run )
        fi
        if [ "${{ inputs.TEST_LEVEL }}" = "RunSpecifiedTests" ] && [ -n "${{ inputs.TESTS_TO_RUN }}" ]; then
          deployFlags+=( --tests "${{ inputs.TESTS_TO_RUN }}" )
        fi
        sf project deploy start "${deployFlags[@]}"